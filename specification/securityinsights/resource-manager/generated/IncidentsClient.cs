// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SecurityInsights
{
    /// <summary> The Incidents service client. </summary>
    public partial class IncidentsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes0 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential0;
        private static readonly string[] AuthorizationScopes1 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential1;
        private static readonly string[] AuthorizationScopes2 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential2;
        private static readonly string[] AuthorizationScopes3 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential3;
        private static readonly string[] AuthorizationScopes4 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential4;
        private static readonly string[] AuthorizationScopes5 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential5;
        private static readonly string[] AuthorizationScopes6 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential6;
        private static readonly string[] AuthorizationScopes7 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential7;
        private static readonly string[] AuthorizationScopes8 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential8;
        private static readonly string[] AuthorizationScopes9 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential9;
        private static readonly string[] AuthorizationScopes10 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential10;
        private static readonly string[] AuthorizationScopes11 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential11;
        private static readonly string[] AuthorizationScopes12 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential12;
        private static readonly string[] AuthorizationScopes13 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential13;
        private static readonly string[] AuthorizationScopes14 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential14;
        private static readonly string[] AuthorizationScopes15 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential15;
        private static readonly string[] AuthorizationScopes16 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential16;
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of IncidentsClient for mocking. </summary>
        protected IncidentsClient()
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of IncidentsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public IncidentsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Triggers playbook on a specific incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentIdentifier"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentIdentifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentIdentifier"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManualTriggerRequestBody</c>:
        /// <code>{
        ///   tenantId: ManualTriggerRequestBodyTenantId, # Optional.
        ///   logicAppsResourceId: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RunPlaybookAsync(string resourceGroupName, string workspaceName, string incidentIdentifier, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentIdentifier, nameof(incidentIdentifier));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.RunPlaybook");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunPlaybookRequest(resourceGroupName, workspaceName, incidentIdentifier, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Triggers playbook on a specific incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentIdentifier"> The String to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentIdentifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentIdentifier"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>ManualTriggerRequestBody</c>:
        /// <code>{
        ///   tenantId: ManualTriggerRequestBodyTenantId, # Optional.
        ///   logicAppsResourceId: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RunPlaybook(string resourceGroupName, string workspaceName, string incidentIdentifier, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentIdentifier, nameof(incidentIdentifier));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.RunPlaybook");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRunPlaybookRequest(resourceGroupName, workspaceName, incidentIdentifier, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetIncidentAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetIncident");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIncidentRequest(resourceGroupName, workspaceName, incidentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets an incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetIncident(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetIncident");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetIncidentRequest(resourceGroupName, workspaceName, incidentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="incidentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, incidentId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates the incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="incidentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Incident</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(resourceGroupName, workspaceName, incidentId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(resourceGroupName, workspaceName, incidentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Delete the incident. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response Delete(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(resourceGroupName, workspaceName, incidentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Microsoft team to investigate the incident by sharing information and insights between participants. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="incidentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TeamProperties</c>:
        /// <code>{
        ///   teamName: string, # Required. The name of the team
        ///   teamDescription: string, # Optional. The description of the team
        ///   memberIds: [TeamPropertiesMemberIdsItem], # Optional. List of member IDs to add to the team
        ///   groupIds: [TeamPropertiesGroupIdsItem], # Optional. List of group IDs to add their members to the team
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TeamInformation</c>:
        /// <code>{
        ///   teamId: string, # Optional. Team ID
        ///   primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///   teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///   name: string, # Optional. The name of the team
        ///   description: string, # Optional. The description of the team
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateTeamAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.CreateTeam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTeamRequest(resourceGroupName, workspaceName, incidentId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Microsoft team to investigate the incident by sharing information and insights between participants. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/>, <paramref name="incidentId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>TeamProperties</c>:
        /// <code>{
        ///   teamName: string, # Required. The name of the team
        ///   teamDescription: string, # Optional. The description of the team
        ///   memberIds: [TeamPropertiesMemberIdsItem], # Optional. List of member IDs to add to the team
        ///   groupIds: [TeamPropertiesGroupIdsItem], # Optional. List of group IDs to add their members to the team
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TeamInformation</c>:
        /// <code>{
        ///   teamId: string, # Optional. Team ID
        ///   primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///   teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///   name: string, # Optional. The name of the team
        ///   description: string, # Optional. The description of the team
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateTeam(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.CreateTeam");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTeamRequest(resourceGroupName, workspaceName, incidentId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident alerts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentAlertList</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       kind: SecurityAlert, # Required. The kind of the entity.
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       properties: {
        ///         additionalData: Dictionary&lt;string, AnyObject&gt;, # Optional. A bag of custom fields that should be part of the entity and will be presented to the user.
        ///         friendlyName: string, # Optional. The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
        ///         alertDisplayName: string, # Optional. The display name of the alert.
        ///         alertType: string, # Optional. The type name of the alert.
        ///         compromisedEntity: string, # Optional. Display name of the main entity being reported on.
        ///         confidenceLevel: &quot;Unknown&quot; | &quot;Low&quot; | &quot;High&quot;, # Optional. The confidence level of this alert.
        ///         confidenceReasons: [
        ///           {
        ///             reason: string, # Optional. The reason&apos;s description
        ///             reasonType: string, # Optional. The type (category) of the reason
        ///           }
        ///         ], # Optional. The confidence reasons
        ///         confidenceScore: number, # Optional. The confidence score of the alert.
        ///         confidenceScoreStatus: &quot;NotApplicable&quot; | &quot;InProcess&quot; | &quot;NotFinal&quot; | &quot;Final&quot;, # Optional. The confidence score calculation status, i.e. indicating if score calculation is pending for this alert, not applicable or final.
        ///         description: string, # Optional. Alert description.
        ///         endTimeUtc: string (ISO 8601 Format), # Optional. The impact end time of the alert (the time of the last event contributing to the alert).
        ///         intent: &quot;Unknown&quot; | &quot;Probing&quot; | &quot;Exploitation&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Execution&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot;, # Optional. Holds the alert intent stage(s) mapping for this alert.
        ///         providerAlertId: string, # Optional. The identifier of the alert inside the product which generated the alert.
        ///         processingEndTime: string (ISO 8601 Format), # Optional. The time the alert was made available for consumption.
        ///         productComponentName: string, # Optional. The name of a component inside the product which generated the alert.
        ///         productName: string, # Optional. The name of the product which published this alert.
        ///         productVersion: string, # Optional. The version of the product generating the alert.
        ///         remediationSteps: [string], # Optional. Manual action items to take to remediate the alert.
        ///         severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Optional. The severity of the alert
        ///         startTimeUtc: string (ISO 8601 Format), # Optional. The impact start time of the alert (the time of the first event contributing to the alert).
        ///         status: &quot;Unknown&quot; | &quot;New&quot; | &quot;Resolved&quot; | &quot;Dismissed&quot; | &quot;InProgress&quot;, # Optional. The lifecycle status of the alert.
        ///         systemAlertId: string, # Optional. Holds the product identifier of the alert for the product.
        ///         tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics of the alert
        ///         timeGenerated: string (ISO 8601 Format), # Optional. The time the alert was generated.
        ///         vendorName: string, # Optional. The name of the vendor that raise the alert.
        ///         alertLink: string, # Optional. The uri link of the alert.
        ///         resourceIdentifiers: [AnyObject], # Optional. The list of resource identifiers of the alert.
        ///       }, # Optional. SecurityAlert entity properties
        ///     }
        ///   ], # Required. Array of incident alerts.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAlertsAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetAlerts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAlertsRequest(resourceGroupName, workspaceName, incidentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident alerts. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentAlertList</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       kind: SecurityAlert, # Required. The kind of the entity.
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       properties: {
        ///         additionalData: Dictionary&lt;string, AnyObject&gt;, # Optional. A bag of custom fields that should be part of the entity and will be presented to the user.
        ///         friendlyName: string, # Optional. The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
        ///         alertDisplayName: string, # Optional. The display name of the alert.
        ///         alertType: string, # Optional. The type name of the alert.
        ///         compromisedEntity: string, # Optional. Display name of the main entity being reported on.
        ///         confidenceLevel: &quot;Unknown&quot; | &quot;Low&quot; | &quot;High&quot;, # Optional. The confidence level of this alert.
        ///         confidenceReasons: [
        ///           {
        ///             reason: string, # Optional. The reason&apos;s description
        ///             reasonType: string, # Optional. The type (category) of the reason
        ///           }
        ///         ], # Optional. The confidence reasons
        ///         confidenceScore: number, # Optional. The confidence score of the alert.
        ///         confidenceScoreStatus: &quot;NotApplicable&quot; | &quot;InProcess&quot; | &quot;NotFinal&quot; | &quot;Final&quot;, # Optional. The confidence score calculation status, i.e. indicating if score calculation is pending for this alert, not applicable or final.
        ///         description: string, # Optional. Alert description.
        ///         endTimeUtc: string (ISO 8601 Format), # Optional. The impact end time of the alert (the time of the last event contributing to the alert).
        ///         intent: &quot;Unknown&quot; | &quot;Probing&quot; | &quot;Exploitation&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Execution&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot;, # Optional. Holds the alert intent stage(s) mapping for this alert.
        ///         providerAlertId: string, # Optional. The identifier of the alert inside the product which generated the alert.
        ///         processingEndTime: string (ISO 8601 Format), # Optional. The time the alert was made available for consumption.
        ///         productComponentName: string, # Optional. The name of a component inside the product which generated the alert.
        ///         productName: string, # Optional. The name of the product which published this alert.
        ///         productVersion: string, # Optional. The version of the product generating the alert.
        ///         remediationSteps: [string], # Optional. Manual action items to take to remediate the alert.
        ///         severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Optional. The severity of the alert
        ///         startTimeUtc: string (ISO 8601 Format), # Optional. The impact start time of the alert (the time of the first event contributing to the alert).
        ///         status: &quot;Unknown&quot; | &quot;New&quot; | &quot;Resolved&quot; | &quot;Dismissed&quot; | &quot;InProgress&quot;, # Optional. The lifecycle status of the alert.
        ///         systemAlertId: string, # Optional. Holds the product identifier of the alert for the product.
        ///         tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics of the alert
        ///         timeGenerated: string (ISO 8601 Format), # Optional. The time the alert was generated.
        ///         vendorName: string, # Optional. The name of the vendor that raise the alert.
        ///         alertLink: string, # Optional. The uri link of the alert.
        ///         resourceIdentifiers: [AnyObject], # Optional. The list of resource identifiers of the alert.
        ///       }, # Optional. SecurityAlert entity properties
        ///     }
        ///   ], # Required. Array of incident alerts.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAlerts(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetAlerts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAlertsRequest(resourceGroupName, workspaceName, incidentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident bookmarks. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentBookmarkList</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       kind: Bookmark, # Required. The kind of the entity.
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       properties: {
        ///         additionalData: Dictionary&lt;string, AnyObject&gt;, # Optional. A bag of custom fields that should be part of the entity and will be presented to the user.
        ///         friendlyName: string, # Optional. The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
        ///         created: string (ISO 8601 Format), # Optional. The time the bookmark was created
        ///         createdBy: {
        ///           email: string, # Optional. The email of the user.
        ///           name: string, # Optional. The name of the user.
        ///           objectId: UserInfoObjectId, # Optional. The object id of the user.
        ///         }, # Optional. Describes a user that created the bookmark
        ///         displayName: string, # Required. The display name of the bookmark
        ///         eventTime: string (ISO 8601 Format), # Optional. The time of the event
        ///         labels: [string], # Optional. List of labels relevant to this bookmark
        ///         notes: string, # Optional. The notes of the bookmark
        ///         query: string, # Required. The query of the bookmark.
        ///         queryResult: string, # Optional. The query result of the bookmark.
        ///         updated: string (ISO 8601 Format), # Optional. The last time the bookmark was updated
        ///         updatedBy: UserInfo, # Optional. Describes a user that updated the bookmark
        ///         incidentInfo: {
        ///           incidentId: string, # Optional. Incident Id
        ///           severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Optional. The severity of the incident
        ///           title: string, # Optional. The title of the incident
        ///           relationName: string, # Optional. Relation Name
        ///         }, # Optional. Describes an incident that relates to bookmark
        ///       }, # Optional. HuntingBookmark entity properties
        ///     }
        ///   ], # Required. Array of incident bookmarks.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetBookmarksAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetBookmarks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBookmarksRequest(resourceGroupName, workspaceName, incidentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident bookmarks. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentBookmarkList</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       kind: Bookmark, # Required. The kind of the entity.
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       properties: {
        ///         additionalData: Dictionary&lt;string, AnyObject&gt;, # Optional. A bag of custom fields that should be part of the entity and will be presented to the user.
        ///         friendlyName: string, # Optional. The graph item display name which is a short humanly readable description of the graph item instance. This property is optional and might be system generated.
        ///         created: string (ISO 8601 Format), # Optional. The time the bookmark was created
        ///         createdBy: {
        ///           email: string, # Optional. The email of the user.
        ///           name: string, # Optional. The name of the user.
        ///           objectId: UserInfoObjectId, # Optional. The object id of the user.
        ///         }, # Optional. Describes a user that created the bookmark
        ///         displayName: string, # Required. The display name of the bookmark
        ///         eventTime: string (ISO 8601 Format), # Optional. The time of the event
        ///         labels: [string], # Optional. List of labels relevant to this bookmark
        ///         notes: string, # Optional. The notes of the bookmark
        ///         query: string, # Required. The query of the bookmark.
        ///         queryResult: string, # Optional. The query result of the bookmark.
        ///         updated: string (ISO 8601 Format), # Optional. The last time the bookmark was updated
        ///         updatedBy: UserInfo, # Optional. Describes a user that updated the bookmark
        ///         incidentInfo: {
        ///           incidentId: string, # Optional. Incident Id
        ///           severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Optional. The severity of the incident
        ///           title: string, # Optional. The title of the incident
        ///           relationName: string, # Optional. Relation Name
        ///         }, # Optional. Describes an incident that relates to bookmark
        ///       }, # Optional. HuntingBookmark entity properties
        ///     }
        ///   ], # Required. Array of incident bookmarks.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetBookmarks(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetBookmarks");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBookmarksRequest(resourceGroupName, workspaceName, incidentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident related entities. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentEntitiesResponse</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       kind: &quot;Account&quot; | &quot;Host&quot; | &quot;File&quot; | &quot;AzureResource&quot; | &quot;CloudApplication&quot; | &quot;DnsResolution&quot; | &quot;FileHash&quot; | &quot;Ip&quot; | &quot;Malware&quot; | &quot;Process&quot; | &quot;RegistryKey&quot; | &quot;RegistryValue&quot; | &quot;SecurityGroup&quot; | &quot;Url&quot; | &quot;IoTDevice&quot; | &quot;SecurityAlert&quot; | &quot;Bookmark&quot; | &quot;MailCluster&quot; | &quot;MailMessage&quot; | &quot;Mailbox&quot; | &quot;SubmissionMail&quot;, # Required. The kind of the entity.
        ///     }
        ///   ], # Optional. Array of the incident related entities.
        ///   metaData: [
        ///     {
        ///       count: number, # Required. Total number of aggregations of the given kind in the incident related entities result.
        ///       entityKind: &quot;Account&quot; | &quot;Host&quot; | &quot;File&quot; | &quot;AzureResource&quot; | &quot;CloudApplication&quot; | &quot;DnsResolution&quot; | &quot;FileHash&quot; | &quot;Ip&quot; | &quot;Malware&quot; | &quot;Process&quot; | &quot;RegistryKey&quot; | &quot;RegistryValue&quot; | &quot;SecurityGroup&quot; | &quot;Url&quot; | &quot;IoTDevice&quot; | &quot;SecurityAlert&quot; | &quot;Bookmark&quot; | &quot;MailCluster&quot; | &quot;MailMessage&quot; | &quot;Mailbox&quot; | &quot;SubmissionMail&quot;, # Required. The kind of the aggregated entity.
        ///     }
        ///   ], # Optional. The metadata from the incident related entities results.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetEntitiesAsync(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesRequest(resourceGroupName, workspaceName, incidentId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incident related entities. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="incidentId"> Incident ID. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="incidentId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentEntitiesResponse</c>:
        /// <code>{
        ///   entities: [
        ///     {
        ///       id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///       name: string, # Optional. The name of the resource
        ///       type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///       systemData: {
        ///         createdBy: string, # Optional. The identity that created the resource.
        ///         createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///         createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///         lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///         lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///         lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///       }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///       kind: &quot;Account&quot; | &quot;Host&quot; | &quot;File&quot; | &quot;AzureResource&quot; | &quot;CloudApplication&quot; | &quot;DnsResolution&quot; | &quot;FileHash&quot; | &quot;Ip&quot; | &quot;Malware&quot; | &quot;Process&quot; | &quot;RegistryKey&quot; | &quot;RegistryValue&quot; | &quot;SecurityGroup&quot; | &quot;Url&quot; | &quot;IoTDevice&quot; | &quot;SecurityAlert&quot; | &quot;Bookmark&quot; | &quot;MailCluster&quot; | &quot;MailMessage&quot; | &quot;Mailbox&quot; | &quot;SubmissionMail&quot;, # Required. The kind of the entity.
        ///     }
        ///   ], # Optional. Array of the incident related entities.
        ///   metaData: [
        ///     {
        ///       count: number, # Required. Total number of aggregations of the given kind in the incident related entities result.
        ///       entityKind: &quot;Account&quot; | &quot;Host&quot; | &quot;File&quot; | &quot;AzureResource&quot; | &quot;CloudApplication&quot; | &quot;DnsResolution&quot; | &quot;FileHash&quot; | &quot;Ip&quot; | &quot;Malware&quot; | &quot;Process&quot; | &quot;RegistryKey&quot; | &quot;RegistryValue&quot; | &quot;SecurityGroup&quot; | &quot;Url&quot; | &quot;IoTDevice&quot; | &quot;SecurityAlert&quot; | &quot;Bookmark&quot; | &quot;MailCluster&quot; | &quot;MailMessage&quot; | &quot;Mailbox&quot; | &quot;SubmissionMail&quot;, # Required. The kind of the aggregated entity.
        ///     }
        ///   ], # Optional. The metadata from the incident related entities results.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetEntities(string resourceGroupName, string workspaceName, string incidentId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNullOrEmpty(incidentId, nameof(incidentId));

            using var scope = ClientDiagnostics.CreateScope("IncidentsClient.GetEntities");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetEntitiesRequest(resourceGroupName, workspaceName, incidentId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets all incidents. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentListValue</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetIncidentsAsync(string resourceGroupName, string workspaceName, string filter = null, string orderby = null, int? top = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            return GetIncidentsImplementationAsync("IncidentsClient.GetIncidents", resourceGroupName, workspaceName, filter, orderby, top, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetIncidentsImplementationAsync(string diagnosticsScopeName, string resourceGroupName, string workspaceName, string filter, string orderby, int? top, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetIncidentsRequest(resourceGroupName, workspaceName, filter, orderby, top, skipToken, context)
                        : CreateGetIncidentsNextPageRequest(nextLink, resourceGroupName, workspaceName, filter, orderby, top, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Gets all incidents. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="filter"> Filters the results, based on a Boolean condition. Optional. </param>
        /// <param name="orderby"> Sorts the results. Optional. </param>
        /// <param name="top"> Returns only the first n results. Optional. </param>
        /// <param name="skipToken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. Optional. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IncidentListValue</c>:
        /// <code>{
        ///   etag: string, # Optional. Etag of the azure resource
        ///   id: string, # Optional. Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        ///   name: string, # Optional. The name of the resource
        ///   type: string, # Optional. The type of the resource. E.g. &quot;Microsoft.Compute/virtualMachines&quot; or &quot;Microsoft.Storage/storageAccounts&quot;
        ///   systemData: {
        ///     createdBy: string, # Optional. The identity that created the resource.
        ///     createdByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that created the resource.
        ///     createdAt: string (ISO 8601 Format), # Optional. The timestamp of resource creation (UTC).
        ///     lastModifiedBy: string, # Optional. The identity that last modified the resource.
        ///     lastModifiedByType: &quot;User&quot; | &quot;Application&quot; | &quot;ManagedIdentity&quot; | &quot;Key&quot;, # Optional. The type of identity that last modified the resource.
        ///     lastModifiedAt: string (ISO 8601 Format), # Optional. The timestamp of resource last modification (UTC)
        ///   }, # Optional. Azure Resource Manager metadata containing createdBy and modifiedBy information.
        ///   properties: {
        ///     additionalData: {
        ///       alertsCount: number, # Optional. The number of alerts in the incident
        ///       bookmarksCount: number, # Optional. The number of bookmarks in the incident
        ///       commentsCount: number, # Optional. The number of comments in the incident
        ///       alertProductNames: [string], # Optional. List of product names of alerts in the incident
        ///       providerIncidentUrl: string, # Optional. The provider incident url to the incident in Microsoft 365 Defender portal
        ///       tactics: [&quot;Reconnaissance&quot; | &quot;ResourceDevelopment&quot; | &quot;InitialAccess&quot; | &quot;Execution&quot; | &quot;Persistence&quot; | &quot;PrivilegeEscalation&quot; | &quot;DefenseEvasion&quot; | &quot;CredentialAccess&quot; | &quot;Discovery&quot; | &quot;LateralMovement&quot; | &quot;Collection&quot; | &quot;Exfiltration&quot; | &quot;CommandAndControl&quot; | &quot;Impact&quot; | &quot;PreAttack&quot; | &quot;ImpairProcessControl&quot; | &quot;InhibitResponseFunction&quot;], # Optional. The tactics associated with incident
        ///       techniques: [string], # Optional. The techniques associated with incident&apos;s tactics&apos;
        ///     }, # Optional. Additional data on the incident
        ///     classification: &quot;Undetermined&quot; | &quot;TruePositive&quot; | &quot;BenignPositive&quot; | &quot;FalsePositive&quot;, # Optional. The reason the incident was closed
        ///     classificationComment: string, # Optional. Describes the reason the incident was closed
        ///     classificationReason: &quot;SuspiciousActivity&quot; | &quot;SuspiciousButExpected&quot; | &quot;IncorrectAlertLogic&quot; | &quot;InaccurateData&quot;, # Optional. The classification reason the incident was closed with
        ///     createdTimeUtc: string (ISO 8601 Format), # Optional. The time the incident was created
        ///     description: string, # Optional. The description of the incident
        ///     firstActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the first activity in the incident
        ///     incidentUrl: string, # Optional. The deep-link url to the incident in Azure portal
        ///     incidentNumber: number, # Optional. A sequential number
        ///     labels: [
        ///       {
        ///         labelName: string, # Required. The name of the label
        ///         labelType: &quot;User&quot; | &quot;AutoAssigned&quot;, # Optional. The type of the label
        ///       }
        ///     ], # Optional. List of labels relevant to this incident
        ///     providerName: string, # Optional. The name of the source provider that generated the incident
        ///     providerIncidentId: string, # Optional. The incident ID assigned by the incident provider
        ///     lastActivityTimeUtc: string (ISO 8601 Format), # Optional. The time of the last activity in the incident
        ///     lastModifiedTimeUtc: string (ISO 8601 Format), # Optional. The last time the incident was updated
        ///     owner: {
        ///       email: string, # Optional. The email of the user the incident is assigned to.
        ///       assignedTo: string, # Optional. The name of the user the incident is assigned to.
        ///       objectId: IncidentOwnerInfoObjectId, # Optional. The object id of the user the incident is assigned to.
        ///       userPrincipalName: string, # Optional. The user principal name of the user the incident is assigned to.
        ///       ownerType: &quot;Unknown&quot; | &quot;User&quot; | &quot;Group&quot;, # Optional. The type of the owner the incident is assigned to.
        ///     }, # Optional. Describes a user that the incident is assigned to
        ///     relatedAnalyticRuleIds: [string], # Optional. List of resource ids of Analytic rules related to the incident
        ///     severity: &quot;High&quot; | &quot;Medium&quot; | &quot;Low&quot; | &quot;Informational&quot;, # Required. The severity of the incident
        ///     status: &quot;New&quot; | &quot;Active&quot; | &quot;Closed&quot;, # Required. The status of the incident
        ///     teamInformation: {
        ///       teamId: string, # Optional. Team ID
        ///       primaryChannelUrl: string, # Optional. The primary channel URL of the team
        ///       teamCreationTimeUtc: string (ISO 8601 Format), # Optional. The time the team was created
        ///       name: string, # Optional. The name of the team
        ///       description: string, # Optional. The description of the team
        ///     }, # Optional. Describes a team for the incident
        ///     title: string, # Required. The title of the incident
        ///   }, # Optional. Incident properties
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetIncidents(string resourceGroupName, string workspaceName, string filter = null, string orderby = null, int? top = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));

            return GetIncidentsImplementation("IncidentsClient.GetIncidents", resourceGroupName, workspaceName, filter, orderby, top, skipToken, context);
        }

        private Pageable<BinaryData> GetIncidentsImplementation(string diagnosticsScopeName, string resourceGroupName, string workspaceName, string filter, string orderby, int? top, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetIncidentsRequest(resourceGroupName, workspaceName, filter, orderby, top, skipToken, context)
                        : CreateGetIncidentsNextPageRequest(nextLink, resourceGroupName, workspaceName, filter, orderby, top, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateRunPlaybookRequest(string resourceGroupName, string workspaceName, string incidentIdentifier, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentIdentifier, true);
            uri.AppendPath("/runPlaybook", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetIncidentsRequest(string resourceGroupName, string workspaceName, string filter, string orderby, int? top, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (orderby != null)
            {
                uri.AppendQuery("$orderby", orderby, true);
            }
            if (top != null)
            {
                uri.AppendQuery("$top", top.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetIncidentRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateTeamRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendPath("/createTeam", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAlertsRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendPath("/alerts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetBookmarksRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendPath("/bookmarks", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetEntitiesRequest(string resourceGroupName, string workspaceName, string incidentId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/incidents/", false);
            uri.AppendPath(incidentId, true);
            uri.AppendPath("/entities", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetIncidentsNextPageRequest(string nextLink, string resourceGroupName, string workspaceName, string filter, string orderby, int? top, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200204;
        private static ResponseClassifier ResponseClassifier200204 => _responseClassifier200204 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204 });
    }
}
