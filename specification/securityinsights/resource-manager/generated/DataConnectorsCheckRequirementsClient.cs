// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace SecurityInsights
{
    /// <summary> The DataConnectorsCheckRequirements service client. </summary>
    public partial class DataConnectorsCheckRequirementsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes0 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential0;
        private static readonly string[] AuthorizationScopes1 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential1;
        private static readonly string[] AuthorizationScopes2 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential2;
        private static readonly string[] AuthorizationScopes3 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential3;
        private static readonly string[] AuthorizationScopes4 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential4;
        private static readonly string[] AuthorizationScopes5 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential5;
        private static readonly string[] AuthorizationScopes6 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential6;
        private static readonly string[] AuthorizationScopes7 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential7;
        private static readonly string[] AuthorizationScopes8 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential8;
        private static readonly string[] AuthorizationScopes9 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential9;
        private static readonly string[] AuthorizationScopes10 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential10;
        private static readonly string[] AuthorizationScopes11 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential11;
        private static readonly string[] AuthorizationScopes12 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential12;
        private static readonly string[] AuthorizationScopes13 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential13;
        private static readonly string[] AuthorizationScopes14 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential14;
        private static readonly string[] AuthorizationScopes15 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential15;
        private static readonly string[] AuthorizationScopes16 = new string[] { "user_impersonation" };
        private readonly TokenCredential _tokenCredential16;
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient for mocking. </summary>
        protected DataConnectorsCheckRequirementsClient()
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/> or <paramref name="credential"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential) : this(subscriptionId, credential, new Uri("https://management.azure.com"), new SecurityInsightsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Initializes a new instance of DataConnectorsCheckRequirementsClient. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public DataConnectorsCheckRequirementsClient(string subscriptionId, TokenCredential credential, Uri endpoint, SecurityInsightsClientOptions options)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new SecurityInsightsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential16 = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential16, AuthorizationScopes16) }, new ResponseClassifier());
            _subscriptionId = subscriptionId;
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get requirements state for a data connector type. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AADCheckRequirements</summary>Schema for <c>AADCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureActiveDirectory, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. AAD (Azure Active Directory) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 16 more JSON objects</summary><details><summary>AatpCheckRequirements</summary>Schema for <c>AatpCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureAdvancedThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. AATP (Azure Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>ASCCheckRequirements</summary>Schema for <c>ASCCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureSecurityCenter, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     subscriptionId: string, # Optional. The subscription id to connect to, and get the data from.
        ///   }, # Optional. ASC (Azure Security Center) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>AwsCloudTrailCheckRequirements</summary>Schema for <c>AwsCloudTrailCheckRequirements</c>:
        /// <code>{
        ///   kind: AmazonWebServicesCloudTrail, # Required. Describes the kind of connector to be checked.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>AwsS3CheckRequirements</summary>Schema for <c>AwsS3CheckRequirements</c>:
        /// <code>{
        ///   kind: AmazonWebServicesS3, # Required. Describes the kind of connector to be checked.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>Dynamics365CheckRequirements</summary>Schema for <c>Dynamics365CheckRequirements</c>:
        /// <code>{
        ///   kind: Dynamics365, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Dynamics365 requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>McasCheckRequirements</summary>Schema for <c>McasCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftCloudAppSecurity, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MCAS (Microsoft Cloud App Security) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MdatpCheckRequirements</summary>Schema for <c>MdatpCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftDefenderAdvancedThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MDATP (Microsoft Defender Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MstiCheckRequirements</summary>Schema for <c>MstiCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftThreatIntelligence, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Microsoft Threat Intelligence requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MtpCheckRequirements</summary>Schema for <c>MtpCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MTP (Microsoft Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficeATPCheckRequirements</summary>Schema for <c>OfficeATPCheckRequirements</c>:
        /// <code>{
        ///   kind: OfficeATP, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. OfficeATP (Office 365 Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficeIRMCheckRequirements</summary>Schema for <c>OfficeIRMCheckRequirements</c>:
        /// <code>{
        ///   kind: OfficeIRM, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. OfficeIRM (Microsoft Insider Risk Management) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>Office365ProjectCheckRequirements</summary>Schema for <c>Office365ProjectCheckRequirements</c>:
        /// <code>{
        ///   kind: Office365Project, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Office365 Project requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficePowerBICheckRequirements</summary>Schema for <c>OfficePowerBICheckRequirements</c>:
        /// <code>{
        ///   kind: OfficePowerBI, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Office Power BI requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>TICheckRequirements</summary>Schema for <c>TICheckRequirements</c>:
        /// <code>{
        ///   kind: ThreatIntelligence, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Threat Intelligence Platforms data connector check required properties
        /// }
        /// </code>
        /// </details>
        /// <details><summary>TiTaxiiCheckRequirements</summary>Schema for <c>TiTaxiiCheckRequirements</c>:
        /// <code>{
        ///   kind: ThreatIntelligenceTaxii, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Threat Intelligence TAXII check required properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>IoTCheckRequirements</summary>Schema for <c>IoTCheckRequirements</c>:
        /// <code>{
        ///   kind: IOT, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     subscriptionId: string, # Optional. The subscription id to connect to, and get the data from.
        ///   }, # Optional. IoT requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataConnectorRequirementsState</c>:
        /// <code>{
        ///   authorizationState: &quot;Valid&quot; | &quot;Invalid&quot;, # Optional. Authorization state for this connector
        ///   licenseState: &quot;Valid&quot; | &quot;Invalid&quot; | &quot;Unknown&quot;, # Optional. License state for this connector
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostAsync(string resourceGroupName, string workspaceName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataConnectorsCheckRequirementsClient.Post");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostRequest(resourceGroupName, workspaceName, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get requirements state for a data connector type. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="workspaceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
        /// <details><summary>AADCheckRequirements</summary>Schema for <c>AADCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureActiveDirectory, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. AAD (Azure Active Directory) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>~+ 16 more JSON objects</summary><details><summary>AatpCheckRequirements</summary>Schema for <c>AatpCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureAdvancedThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. AATP (Azure Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>ASCCheckRequirements</summary>Schema for <c>ASCCheckRequirements</c>:
        /// <code>{
        ///   kind: AzureSecurityCenter, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     subscriptionId: string, # Optional. The subscription id to connect to, and get the data from.
        ///   }, # Optional. ASC (Azure Security Center) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>AwsCloudTrailCheckRequirements</summary>Schema for <c>AwsCloudTrailCheckRequirements</c>:
        /// <code>{
        ///   kind: AmazonWebServicesCloudTrail, # Required. Describes the kind of connector to be checked.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>AwsS3CheckRequirements</summary>Schema for <c>AwsS3CheckRequirements</c>:
        /// <code>{
        ///   kind: AmazonWebServicesS3, # Required. Describes the kind of connector to be checked.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>Dynamics365CheckRequirements</summary>Schema for <c>Dynamics365CheckRequirements</c>:
        /// <code>{
        ///   kind: Dynamics365, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Dynamics365 requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>McasCheckRequirements</summary>Schema for <c>McasCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftCloudAppSecurity, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MCAS (Microsoft Cloud App Security) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MdatpCheckRequirements</summary>Schema for <c>MdatpCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftDefenderAdvancedThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MDATP (Microsoft Defender Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MstiCheckRequirements</summary>Schema for <c>MstiCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftThreatIntelligence, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Microsoft Threat Intelligence requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>MtpCheckRequirements</summary>Schema for <c>MtpCheckRequirements</c>:
        /// <code>{
        ///   kind: MicrosoftThreatProtection, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. MTP (Microsoft Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficeATPCheckRequirements</summary>Schema for <c>OfficeATPCheckRequirements</c>:
        /// <code>{
        ///   kind: OfficeATP, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. OfficeATP (Office 365 Advanced Threat Protection) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficeIRMCheckRequirements</summary>Schema for <c>OfficeIRMCheckRequirements</c>:
        /// <code>{
        ///   kind: OfficeIRM, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. OfficeIRM (Microsoft Insider Risk Management) requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>Office365ProjectCheckRequirements</summary>Schema for <c>Office365ProjectCheckRequirements</c>:
        /// <code>{
        ///   kind: Office365Project, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Office365 Project requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>OfficePowerBICheckRequirements</summary>Schema for <c>OfficePowerBICheckRequirements</c>:
        /// <code>{
        ///   kind: OfficePowerBI, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Office Power BI requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>TICheckRequirements</summary>Schema for <c>TICheckRequirements</c>:
        /// <code>{
        ///   kind: ThreatIntelligence, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Threat Intelligence Platforms data connector check required properties
        /// }
        /// </code>
        /// </details>
        /// <details><summary>TiTaxiiCheckRequirements</summary>Schema for <c>TiTaxiiCheckRequirements</c>:
        /// <code>{
        ///   kind: ThreatIntelligenceTaxii, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     tenantId: string, # Required. The tenant id to connect to, and get the data from.
        ///   }, # Optional. Threat Intelligence TAXII check required properties.
        /// }
        /// </code>
        /// </details>
        /// <details><summary>IoTCheckRequirements</summary>Schema for <c>IoTCheckRequirements</c>:
        /// <code>{
        ///   kind: IOT, # Required. Describes the kind of connector to be checked.
        ///   properties: {
        ///     subscriptionId: string, # Optional. The subscription id to connect to, and get the data from.
        ///   }, # Optional. IoT requirements check properties.
        /// }
        /// </code>
        /// </details>
        /// </details>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>DataConnectorRequirementsState</c>:
        /// <code>{
        ///   authorizationState: &quot;Valid&quot; | &quot;Invalid&quot;, # Optional. Authorization state for this connector
        ///   licenseState: &quot;Valid&quot; | &quot;Invalid&quot; | &quot;Unknown&quot;, # Optional. License state for this connector
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response Post(string resourceGroupName, string workspaceName, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(workspaceName, nameof(workspaceName));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("DataConnectorsCheckRequirementsClient.Post");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostRequest(resourceGroupName, workspaceName, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreatePostRequest(string resourceGroupName, string workspaceName, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.OperationalInsights/workspaces/", false);
            uri.AppendPath(workspaceName, true);
            uri.AppendPath("/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
